services:
  eureka:
    build: ./EurekaServer
    image: houdachaanbi/eureka-server:1.0
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql:3306/jobTest?createDatabaseIfNotExist=true&useSSL=false
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    networks:
      - my-network
    depends_on:
      - mysql

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=CardLibrary
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - my-network

  card-service:
    build: ./Card
    image: houdachaanbi/card-service:latest
    container_name: card-service
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/CardLibrary
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_APPNAME=CARD-SERVICE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      mongo:
        condition: service_healthy
      eureka:
        condition: service_started
    networks:
      - my-network

  apigateway:
    build: ./APIGatway
    image: houdachaanbi/apigateway
    container_name: apigateway
    depends_on:
      - eureka
      - card-service
    ports:
      - "8086:8086"
    environment:
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    networks:
      - my-network

  loanservice:
    build: ./Loan
    image: houdachaanbi/loan-service
    container_name: loanservice
    depends_on:
      - eureka
    ports:
      - "8090:8090"
    environment:
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    volumes:
      - ./Loan/database:/opt/app/database
    networks:
      - my-network

  author-service:
    build: ./author1
    image: nourheneouhichi/mini-project-microservice-author:latest
    container_name: author-container
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - eureka
    command: ["sh", "-c", "dockerize -wait tcp://mysql:3306 -timeout 30s && java -jar /app.jar"]
    environment:
      - spring.application.name=AUTHOR-SERVICE
      - server.port=8081
      - spring.datasource.url=jdbc:mysql://mysql:3306/authorDB?createDatabaseIfNotExist=true&useSSL=false
      - spring.datasource.username=root
      - spring.datasource.password=
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    networks:
      - my-network

  genre-service:
    build: ./Genre
    container_name: genre-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dbGenre?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SERVER_PORT=8089
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
    ports:
      - "8089:8089"
    depends_on:
      - mysql
      - eureka
    networks:
      - my-network

  publisher:
    build: ./publisher
    image: fourat777/publisher
    container_name: publisher
    ports:
      - "8092:8092"
    depends_on:
      - eureka
    environment:
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    volumes:
      - ./publisher/database:/opt/app/database
    networks:
      - my-network

  book:
    build: ./book
    image: wassef17/book
    container_name: book
    ports:
      - "8091:8091"
    depends_on:
      - eureka
    environment:
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    volumes:
      - ./book/database:/opt/app/database
    networks:
      - my-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=dbGenre
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mysql_data:
  mongo_data: 